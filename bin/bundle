# frozen_string_literal: true

require 'rubygems'

module BundlerSetup
  module_function

  def invoked_as_script?
    File.expand_path($PROGRAM_NAME) == File.expand_path(__FILE__)
  end

  def cli_arg_version
    return unless invoked_as_script?
    return unless ARGV.first == 'update'

    bundler_version = find_bundler_version
    ARGV.each_with_index do |arg, i|
      if arg =~ /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/
        bundler_version = Regexp.last_match(1)
      end
    end
    bundler_version
  end

  def find_bundler_version
    ARGV.each_cons(2) do |current, next_arg|
      return next_arg if current == 'update' && next_arg.match?(Gem::Version::ANCHORED_VERSION_PATTERN)
    end
    nil
  end

  def load_bundler!
    ENV['BUNDLE_GEMFILE'] ||= gemfile
    activate_bundler
  end

  def activate_bundler
    activate_gem('bundler', bundler_requirement)
  end

  def activate_gem(gem_name, requirement)
    gem_error = activation_error_handling { gem gem_name, requirement }
    return if gem_error.nil?

    require_error = activation_error_handling { require "#{gem_name}/version" }
    return if require_error.nil? && Gem::Requirement.new(requirement).satisfied_by?(Gem::Version.new(Gem.loaded_specs[gem_name].version.to_s))

    warn "Activating #{gem_name} (#{requirement}) failed:\n" \
      "#{gem_error.message}\n\n" \
      "To install the version of #{gem_name} this project requires, " \
      "run `gem install #{gem_name} -v '#{requirement}'`"
    exit 42
  end

  def activation_error_handling
    yield
    nil
  rescue StandardError, LoadError => e
    e
  end

  def bundler_requirement
    @bundler_requirement ||= ENV['BUNDLER_VERSION'] || cli_arg_version || bundler_requirement_for(lockfile_version)
  end

  def bundler_requirement_for(version)
    "#{Gem::Requirement.default}.a" unless version

    Gem::Version.new(version).approximate_recommendation
  end

  def gemfile
    ENV['BUNDLE_GEMFILE'] || File.expand_path('../Gemfile', __dir__)
  end

  def lockfile
    case File.basename(gemfile)
    when 'gems.rb' then gemfile.sub(/\.rb$/, '.locked')
    else "#{gemfile}.lock"
    end
  end

  def lockfile_version
    return unless File.file?(lockfile)

    lockfile_contents = File.read(lockfile)
    return unless lockfile_contents =~ /\n\nBUNDLED WITH\n\s{2,}(#{Gem::Version::VERSION_PATTERN})\n/

    Regexp.last_match(1)
  end
end

BundlerSetup.load_bundler!

load Gem.bin_path('bundler', 'bundle') if BundlerSetup.invoked_as_script?
